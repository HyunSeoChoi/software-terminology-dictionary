{"version":3,"sources":["Components/Main.js","Components/Search.js","NotFound.js","App.js","serviceWorker.js","index.js"],"names":["Container","styled","div","SearchDiv","SearchInput","input","SearchButton","button","Main","props","handleSearch","handleOnChange","e","setState","target","name","value","state","word","type","onChange","this","placeholder","onClick","Component","Search","NotFound","App","console","log","window","location","pathname","exact","path","component","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"qnCAGA,IAAMA,EAAYC,IAAOC,IAAV,KAUTC,EAAYF,IAAOC,IAAV,KAYTE,EAAcH,IAAOI,MAAV,KASXC,EAAeL,IAAOM,OAAV,KA4CHC,E,kDAjCb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAMRC,aAAe,aAPI,EASnBC,eAAiB,SAAAC,GACf,EAAKC,SAAL,eACGD,EAAEE,OAAOC,KAAOH,EAAEE,OAAOE,SAT5B,EAAKC,MAAQ,CACXC,KAAM,IAHS,E,qDAgBjB,OACE,kBAAClB,EAAD,KACE,kBAACG,EAAD,KACE,kBAACC,EAAD,CACEe,KAAK,OACLJ,KAAK,OACLK,SAAUC,KAAKV,eACfW,YAAY,4BACZN,MAAOK,KAAKJ,MAAMC,OAEpB,kBAACZ,EAAD,CAAciB,QAASF,KAAKX,cAA5B,sB,GA3BSc,aCpCJC,E,uKAJX,OAAO,yC,GAFUD,aCMNE,E,uKAJX,OAAO,kC,GAFYF,aC4BRG,E,4MAtBbjB,aAAe,a,EAEfC,eAAiB,SAAAC,GACf,EAAKC,SAAL,eACGD,EAAEE,OAAOC,KAAOH,EAAEE,OAAOE,S,uDAM5B,OADAY,QAAQC,IAAIC,OAAOC,SAASC,UAE1B,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAI,IAAOC,UAAW3B,IACnC,kBAAC,IAAD,CAAO0B,KAAI,UAAaC,UAAWV,IACnC,kBAAC,IAAD,CAAOU,UAAWT,U,GAhBVF,aCKEY,QACW,cAA7BN,OAAOC,SAASM,UAEe,UAA7BP,OAAOC,SAASM,UAEhBP,OAAOC,SAASM,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvB,QAAQuB,MAAMA,EAAMC,c","file":"static/js/main.4909c078.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Container = styled.div`\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  background: url(https://source.unsplash.com/random/1920x1080);\r\n  background-size: cover;\r\n`;\r\n\r\nconst SearchDiv = styled.div`\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 50%;\r\n  margin-left: -200px;\r\n  margin-top: -20px;\r\n  height: 40px;\r\n  width: 400px;\r\n  border: 1px solid #1b5ac2;\r\n  background: #ffffff;\r\n`;\r\n\r\nconst SearchInput = styled.input`\r\n  font-size: 16px;\r\n  width: 325px;\r\n  padding: 10px;\r\n  border: 0px;\r\n  outline: none;\r\n  float: left;\r\n`;\r\n\r\nconst SearchButton = styled.button`\r\n  width: 50px;\r\n  height: 100%;\r\n  border: 0px;\r\n  background: #1b5ac2;\r\n  outline: none;\r\n  float: right;\r\n  color: #ffffff;\r\n`;\r\n\r\nclass Main extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      word: \"\"\r\n    };\r\n  }\r\n\r\n  handleSearch = () => {};\r\n\r\n  handleOnChange = e => {\r\n    this.setState({\r\n      [e.target.name]: e.target.value\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Container>\r\n        <SearchDiv>\r\n          <SearchInput\r\n            type=\"text\"\r\n            name=\"word\"\r\n            onChange={this.handleOnChange}\r\n            placeholder=\"단어 입력\"\r\n            value={this.state.word}\r\n          />\r\n          <SearchButton onClick={this.handleSearch}>검색</SearchButton>\r\n        </SearchDiv>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Main;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Search extends Component {\r\n  render() {\r\n    return <div>AAAA</div>;\r\n  }\r\n}\r\n\r\nexport default Search;\r\n","import React, { Component } from \"react\";\r\n\r\nclass NotFound extends Component {\r\n  render() {\r\n    return <div></div>;\r\n  }\r\n}\r\n\r\nexport default NotFound;\r\n","import React, { Component } from \"react\";\r\n// import styled from \"styled-components\";\r\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\r\nimport Main from \"./Components/Main\";\r\nimport Search from \"./Components/Search\";\r\nimport NotFound from \"./NotFound\";\r\n\r\nclass App extends Component {\r\n  handleSearch = () => {};\r\n\r\n  handleOnChange = e => {\r\n    this.setState({\r\n      [e.target.name]: e.target.value\r\n    });\r\n  };\r\n\r\n  render() {\r\n    console.log(window.location.pathname);\r\n    return (\r\n      <Router>\r\n        <Switch>\r\n          <Route exact path={`/`} component={Main} />\r\n          <Route path={`/search`} component={Search} />\r\n          <Route component={NotFound} />\r\n        </Switch>\r\n      </Router>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            \"This web app is being served cache-first by a service \" +\r\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                \"New content is available and will be used when all \" +\r\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { \"Service-Worker\": \"script\" }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get(\"content-type\");\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\"\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}